"""init for memo and doc archive

Revision ID: cf315e9d92eb
Revises: 26094c9632eb
Create Date: 2025-04-10 13:59:38.619587

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cf315e9d92eb'
down_revision: Union[str, None] = '26094c9632eb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('desa',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=26), nullable=False),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_desa_id'), 'desa', ['id'], unique=False)
    op.create_table('land_bank',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=26), nullable=False),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('descs', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('company_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('desa_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('alashak_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('doc_no', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('luas_tanah', sa.Numeric(), nullable=False),
    sa.Column('luas_awal', sa.Numeric(), nullable=True),
    sa.Column('luas_sertifikat', sa.Numeric(), nullable=True),
    sa.Column('parent_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['alashak_id'], ['alashak.id'], ),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], ),
    sa.ForeignKeyConstraint(['desa_id'], ['desa.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['land_bank.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_land_bank_id'), 'land_bank', ['id'], unique=False)
    op.create_table('doc_archive_history',
    sa.Column('doc_archive_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('memo_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('before', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('after', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(length=26), nullable=False),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_by', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['doc_archive_id'], ['doc_archive.id'], ),
    sa.ForeignKeyConstraint(['memo_id'], ['memo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_doc_archive_history_id'), 'doc_archive_history', ['id'], unique=False)
    op.add_column('doc_archive', sa.Column('is_transfer', sa.Boolean(), nullable=True))
    op.add_column('doc_archive', sa.Column('safe_location', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('doc_archive', sa.Column('land_bank_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.create_foreign_key(None, 'doc_archive', 'land_bank', ['land_bank_id'], ['id'])
    op.sync_enum_values(
        enum_schema='public',
        enum_name='statusdocarchiveenum',
        new_values=['AVAILABLE', 'UNAVAILABLE', 'AVAILABLE_HOLD'],
        affected_columns=[TableReference(table_schema='public', table_name='doc_archive', column_name='status')],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema='public',
        enum_name='necessityenum',
        new_values=['KELUAR_KE_KONSUMEN', 'KELUAR_KE_BANK', 'PENGGABUNGAN', 'PROSES_AJB', 'CHECK_INTERNAL', 'PEMECAHAN', 'PERPANJANGAN', 'REVISI', 'PEMISAHAN', 'TRANSFER'],
        affected_columns=[TableReference(table_schema='public', table_name='memo', column_name='necessity')],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema='public',
        enum_name='outgoingtodoctypeenum',
        new_values=['ASLI', 'COPY'],
        affected_columns=[TableReference(table_schema='public', table_name='memo', column_name='outgoing_doc_type')],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema='public',
        enum_name='outgoingtodoctypeenum',
        new_values=['ASLI', 'COPY', 'TRANSFER'],
        affected_columns=[TableReference(table_schema='public', table_name='memo', column_name='outgoing_doc_type')],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema='public',
        enum_name='necessityenum',
        new_values=['KELUAR_KE_KONSUMEN', 'KELUAR_KE_BANK', 'PENGGABUNGAN', 'PROSES_AJB', 'CHECK_INTERNAL', 'PEMECAHAN', 'PERPANJANGAN', 'REVISI', 'PEMISAHAN'],
        affected_columns=[TableReference(table_schema='public', table_name='memo', column_name='necessity')],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema='public',
        enum_name='statusdocarchiveenum',
        new_values=['AVAILABLE', 'UNAVAILABLE'],
        affected_columns=[TableReference(table_schema='public', table_name='doc_archive', column_name='status')],
        enum_values_to_rename=[],
    )
    op.drop_constraint(None, 'doc_archive', type_='foreignkey')
    op.drop_column('doc_archive', 'land_bank_id')
    op.drop_column('doc_archive', 'safe_location')
    op.drop_column('doc_archive', 'is_transfer')
    op.drop_index(op.f('ix_doc_archive_history_id'), table_name='doc_archive_history')
    op.drop_table('doc_archive_history')
    op.drop_index(op.f('ix_land_bank_id'), table_name='land_bank')
    op.drop_table('land_bank')
    op.drop_index(op.f('ix_desa_id'), table_name='desa')
    op.drop_table('desa')
    # ### end Alembic commands ###
